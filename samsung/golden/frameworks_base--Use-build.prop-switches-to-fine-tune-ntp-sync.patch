From 7db40759d8e2eee0df55be0657e0fd10f7610f5b Mon Sep 17 00:00:00 2001
From: Stefan Berger <s.berger81@gmail.com>
Date: Sat, 25 Oct 2014 18:29:55 +0200
Subject: [PATCH] Use build.prop switches to fine-tune ntp sync

ro.config.ntp.server_poll=86400000
ro.config.ntp.clock_sync=1800000
ro.config.ntp.sync_mode=3

Description

ro.config.ntp.server_poll: ntp server poll interval in msecs (default: 86400000, which means 24 hours)
ro.config.ntp.clock_sync: system clock sync interval in msecs (default: 1800000, which means 30 minutes)
ro.config.ntp.sync_mode: this is the "master switch" for sync mode (default: 3, possible values are: -2,-1,0,1,2,3)

-2: Always sync clock with ntp time (default interval: every 30 mins). Was default in previous builds.
-1: Only sync clock, if clock drifts more than 5 secs (default interval: every 30 mins).
 0: Use NITZ, if available. Alternatively, only sync clock, if clock drifts more than 5 secs.
 1,2,3: same as 0. Also, make 1,2 or 3 ntp poll retries, in case the ntp server is not accessible.

Change-Id: I93e9214055e0b591cbc8221e621da7f57aee7bd8
---
 .../android/server/NetworkTimeUpdateService.java   |   30 +++++++++++---------
 1 file changed, 17 insertions(+), 13 deletions(-)

diff --git a/services/java/com/android/server/NetworkTimeUpdateService.java b/services/java/com/android/server/NetworkTimeUpdateService.java
index 10fc2f7..a93a0f3 100644
--- a/services/java/com/android/server/NetworkTimeUpdateService.java
+++ b/services/java/com/android/server/NetworkTimeUpdateService.java
@@ -31,6 +31,7 @@ import android.os.HandlerThread;
 import android.os.Looper;
 import android.os.Message;
 import android.os.SystemClock;
+import android.os.SystemProperties;
 import android.provider.Settings;
 import android.util.Log;
 import android.util.NtpTrustedTime;
@@ -97,12 +98,13 @@ public class NetworkTimeUpdateService {
         Intent pollIntent = new Intent(ACTION_POLL, null);
         mPendingPollIntent = PendingIntent.getBroadcast(mContext, POLL_REQUEST, pollIntent, 0);
 
-        mPollingIntervalMs = mContext.getResources().getInteger(
-                com.android.internal.R.integer.config_ntpPollingInterval);
-        mPollingIntervalShorterMs = mContext.getResources().getInteger(
-                com.android.internal.R.integer.config_ntpPollingIntervalShorter);
-        mTryAgainTimesMax = mContext.getResources().getInteger(
-                com.android.internal.R.integer.config_ntpRetry);
+        mPollingIntervalMs = SystemProperties.getLong("ro.config.ntp.server_poll",
+                mContext.getResources().getInteger(com.android.internal.R.integer.config_ntpPollingInterval));
+        mPollingIntervalShorterMs = SystemProperties.getLong("ro.config.ntp.clock_sync",
+                mContext.getResources().getInteger(com.android.internal.R.integer.config_ntpPollingIntervalShorter));
+        mTryAgainTimesMax = SystemProperties.getInt("ro.config.ntp.sync_mode",
+                mContext.getResources().getInteger(com.android.internal.R.integer.config_ntpRetry));
+
         mTimeErrorThresholdMs = mContext.getResources().getInteger(
                 com.android.internal.R.integer.config_ntpThreshold);
     }
@@ -153,7 +155,7 @@ public class NetworkTimeUpdateService {
         final long refTime = SystemClock.elapsedRealtime();
 
 	// Only consider NITZ time if mTryAgainTimesMax has a non-negative value
-	if (mTryAgainTimesMax > 0) {
+	if (mTryAgainTimesMax >= 0) {
             // If NITZ time was received less than mPollingIntervalMs time ago,
             // no need to sync to NTP. 
             if (mNitzTimeSetTime != NOT_SET && refTime - mNitzTimeSetTime < mPollingIntervalMs) {
@@ -208,12 +210,14 @@ public class NetworkTimeUpdateService {
                 return;
             }
         }
-	// Always poll sooner if mTryAgainTimesMax has a negative value
-	if (mTryAgainTimesMax < 0) {
-	    mLastNtpFetchTime = NOT_SET;
-	    resetAlarm(mPollingIntervalShorterMs);
-	    return;
-	}
+        // Always poll sooner if mTryAgainTimesMax has a negative value
+        if (mTryAgainTimesMax < 0) {
+            if (mTryAgainTimesMax == -2) {
+                mLastNtpFetchTime = NOT_SET;
+            }
+            resetAlarm(mPollingIntervalShorterMs);
+            return;
+        }
         resetAlarm(mPollingIntervalMs);
     }
 
-- 
1.7.9.5

