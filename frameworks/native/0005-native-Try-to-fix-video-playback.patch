From 8b355d692dbafc7b73cb5544e321226866afaff1 Mon Sep 17 00:00:00 2001
From: Stefan Berger <s.berger81@gmail.com>
Date: Fri, 20 Feb 2015 22:34:41 +0100
Subject: [PATCH 5/6] native: Try to fix video playback

Change-Id: I02e9c31abc61d3a5d90c62bd314bc880df93911c
---
 include/gui/GLConsumer.h |    5 -----
 libs/gui/GLConsumer.cpp  |   22 +++-------------------
 libs/ui/PixelFormat.cpp  |    9 ++++-----
 3 files changed, 7 insertions(+), 29 deletions(-)

diff --git a/include/gui/GLConsumer.h b/include/gui/GLConsumer.h
index a48c549..474d286 100644
--- a/include/gui/GLConsumer.h
+++ b/include/gui/GLConsumer.h
@@ -316,11 +316,6 @@ private:
         const native_handle* graphicBufferHandle() {
             return mGraphicBuffer == NULL ? NULL : mGraphicBuffer->handle;
         }
-#ifdef STE_HARDWARE
-        void setGraphicBuffer(sp<GraphicBuffer> graphicBuffer) {
-            mGraphicBuffer = graphicBuffer;
-        }
-#endif
 
     private:
         // Only allow instantiation using ref counting.
diff --git a/libs/gui/GLConsumer.cpp b/libs/gui/GLConsumer.cpp
index 3fdc027..f6ce634 100644
--- a/libs/gui/GLConsumer.cpp
+++ b/libs/gui/GLConsumer.cpp
@@ -477,12 +477,6 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
         mEglSlots[buf].mEglImage = new EglImage(textureBuffer);
         mNextBlitSlot = (mNextBlitSlot + 1) % BufferQueue::NUM_BLIT_BUFFER_SLOTS;
     }
-    else {
-        textureBuffer = mSlots[buf].mGraphicBuffer;
-    }
-
-    // Set EglImage to use the new textureBuffer
-    mEglSlots[buf].mEglImage->setGraphicBuffer(textureBuffer);
 #endif
 
     // Ensure we have a valid EglImageKHR for the slot, creating an EglImage
@@ -490,14 +484,8 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
     // ConsumerBase.
     // We may have to do this even when item.mGraphicBuffer == NULL (which
     // means the buffer was previously acquired).
-
-#ifdef STE_HARDWARE
-    // Force EglImage to destroy old eglImage and create a new one
-    // using textureBuffer.
-    err = mEglSlots[buf].mEglImage->createIfNeeded(mEglDisplay, item.mCrop, true);
-#else
     err = mEglSlots[buf].mEglImage->createIfNeeded(mEglDisplay, item.mCrop);
-#endif
+
     if (err != NO_ERROR) {
         ST_LOGW("updateAndRelease: unable to createImage on display=%p slot=%d",
                 mEglDisplay, buf);
@@ -513,12 +501,8 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
         // release the old buffer, so instead we just drop the new frame.
         // As we are still under lock since acquireBuffer, it is safe to
         // release by slot.
-#ifdef STE_HARDWARE
-        releaseBufferLocked(buf, textureBuffer,
-#else        
-        releaseBufferLocked(buf, mSlots[buf].mGraphicBuffer,
-#endif
-                mEglDisplay, EGL_NO_SYNC_KHR);
+
+        releaseBufferLocked(buf, mSlots[buf].mGraphicBuffer, mEglDisplay, EGL_NO_SYNC_KHR);
         return err;
     }
 
diff --git a/libs/ui/PixelFormat.cpp b/libs/ui/PixelFormat.cpp
index ac964e0..cbd0063 100644
--- a/libs/ui/PixelFormat.cpp
+++ b/libs/ui/PixelFormat.cpp
@@ -90,6 +90,10 @@ status_t getPixelFormatInfo(PixelFormat format, PixelFormatInfo* info)
     case HAL_PIXEL_FORMAT_YCbCr_422_I:
         info->bitsPerPixel = 16;
         goto done;
+#ifdef STE_HARDWARE
+    case HAL_PIXEL_FORMAT_YCbCr_420_P:
+    case HAL_PIXEL_FORMAT_YCBCR42XMBN:
+#endif
     case HAL_PIXEL_FORMAT_YCrCb_420_SP:
     case HAL_PIXEL_FORMAT_YV12:
         info->bitsPerPixel = 12;
@@ -158,11 +162,6 @@ ssize_t bitsPerPixel(PixelFormat format) {
         case PIXEL_FORMAT_RGBA_5551:
         case PIXEL_FORMAT_RGBA_4444:
             return 16;
-#ifdef STE_HARDWARE
-        case HAL_PIXEL_FORMAT_YCbCr_420_P:
-        case HAL_PIXEL_FORMAT_YCBCR42XMBN:
-            return 12;
-#endif
     }
     return BAD_VALUE;
 }
-- 
1.7.9.5

