From 2167734f51ca5160d84424c1d39cfbcd7a7fec5e Mon Sep 17 00:00:00 2001
From: Agontuk <rifat662@gmail.com>
Date: Sun, 4 Jan 2015 11:37:45 +0100
Subject: [PATCH 2/6] STE OMX Fix video playback

Change-Id: I9e02f38fe6d8f76eeb0c0ff76c11ead16954edfb
---
 include/gui/GLConsumer.h |    5 +++++
 libs/gui/GLConsumer.cpp  |   39 +++++++++++++++++++++++++--------------
 2 files changed, 30 insertions(+), 14 deletions(-)

diff --git a/include/gui/GLConsumer.h b/include/gui/GLConsumer.h
index 474d286..a48c549 100644
--- a/include/gui/GLConsumer.h
+++ b/include/gui/GLConsumer.h
@@ -316,6 +316,11 @@ private:
         const native_handle* graphicBufferHandle() {
             return mGraphicBuffer == NULL ? NULL : mGraphicBuffer->handle;
         }
+#ifdef STE_HARDWARE
+        void setGraphicBuffer(sp<GraphicBuffer> graphicBuffer) {
+            mGraphicBuffer = graphicBuffer;
+        }
+#endif
 
     private:
         // Only allow instantiation using ref counting.
diff --git a/libs/gui/GLConsumer.cpp b/libs/gui/GLConsumer.cpp
index 6711362..e9af9da 100644
--- a/libs/gui/GLConsumer.cpp
+++ b/libs/gui/GLConsumer.cpp
@@ -430,21 +430,10 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
         return err;
     }
 
-    // Ensure we have a valid EglImageKHR for the slot, creating an EglImage
-    // if nessessary, for the gralloc buffer currently in the slot in
-    // ConsumerBase.
-    // We may have to do this even when item.mGraphicBuffer == NULL (which
-    // means the buffer was previously acquired).
-
 #ifdef STE_HARDWARE
     sp<GraphicBuffer> textureBuffer;
     if (mSlots[buf].mGraphicBuffer->getPixelFormat() == HAL_PIXEL_FORMAT_YCBCR42XMBN 
      || mSlots[buf].mGraphicBuffer->getPixelFormat() == HAL_PIXEL_FORMAT_YCbCr_420_P) {
-        /* deallocate image each time .... */
-        if (&mEglSlots[buf].mEglImage != EGL_NO_IMAGE_KHR) {
-            eglDestroyImageKHR(mEglDisplay, &mEglSlots[buf].mEglImage);
-            mEglSlots[buf].mEglImage = (android::GLConsumer::EglImage*)EGL_NO_IMAGE_KHR;
-        }
         /* test if source and convert buffer size are ok */
         if (mSlots[buf].mGraphicBuffer != NULL && mBlitSlots[mNextBlitSlot] != NULL) {
             sp<GraphicBuffer> srcBuf = mSlots[buf].mGraphicBuffer;
@@ -478,12 +467,29 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
             return UNKNOWN_ERROR;
         }
         textureBuffer = mBlitSlots[mNextBlitSlot];
-        mSlots[buf].mGraphicBuffer = textureBuffer;
         mNextBlitSlot = (mNextBlitSlot + 1) % BufferQueue::NUM_BLIT_BUFFER_SLOTS;
     }
+    else {
+        textureBuffer = mSlots[buf].mGraphicBuffer;
+    }
+
+    // Set EglImage to use the new textureBuffer
+    mEglSlots[buf].mEglImage->setGraphicBuffer(textureBuffer);
 #endif
 
+    // Ensure we have a valid EglImageKHR for the slot, creating an EglImage
+    // if nessessary, for the gralloc buffer currently in the slot in
+    // ConsumerBase.
+    // We may have to do this even when item.mGraphicBuffer == NULL (which
+    // means the buffer was previously acquired).
+
+#ifdef STE_HARDWARE
+    // Force EglImage to destroy old eglImage and create a new one
+    // using textureBuffer.
+    err = mEglSlots[buf].mEglImage->createIfNeeded(mEglDisplay, item.mCrop, true);
+#else
     err = mEglSlots[buf].mEglImage->createIfNeeded(mEglDisplay, item.mCrop);
+#endif
     if (err != NO_ERROR) {
         ST_LOGW("updateAndRelease: unable to createImage on display=%p slot=%d",
                 mEglDisplay, buf);
@@ -498,8 +504,13 @@ status_t GLConsumer::updateAndReleaseLocked(const BufferQueue::BufferItem& item)
         // Release the buffer we just acquired.  It's not safe to
         // release the old buffer, so instead we just drop the new frame.
         // As we are still under lock since acquireBuffer, it is safe to
-        // release by slot.        
-        releaseBufferLocked(buf, mSlots[buf].mGraphicBuffer, mEglDisplay, EGL_NO_SYNC_KHR);
+        // release by slot.
+#ifdef STE_HARDWARE
+        releaseBufferLocked(buf, textureBuffer,
+#else        
+        releaseBufferLocked(buf, mSlots[buf].mGraphicBuffer,
+#endif
+                mEglDisplay, EGL_NO_SYNC_KHR);
         return err;
     }
 
-- 
1.7.9.5

